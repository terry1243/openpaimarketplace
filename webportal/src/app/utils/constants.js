// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

/* eslint-disable no-template-curly-in-string */

export const MARKETPLACE_API_URL = process.env.MARKETPLACE_API_URL;

export const MARKET_ITEM_LIST = [
  {
    id: '1',
    name: 'Couplet Dataset',
    author: 'OpenPAI',
    type: 'data',
    categories: 'AI couplet',
    tags: ['official example'],
    summary: 'Dataset of couplet',
    protocol: 'couplet_dataset.yaml',
    useNumber: 0,
    starNumber: 0,
    status: 'approved',
    createdAt: '2020-08-15T04:52:48.289Z',
    updatedAt: '2020-08-15T04:52:48.289Z',
  },
  {
    id: '2',
    name: 'Couplet Dataset test test test',
    author: 'OpenPAI',
    type: 'data',
    categories: 'AI couplet',
    tags: ['official example'],
    summary: 'Dataset of couplet',
    protocol: 'couplet_dataset.yaml',
    useNumber: 0,
    starNumber: 0,
    status: 'approved',
    createdAt: '2020-08-15T04:52:48.289Z',
    updatedAt: '2020-08-15T04:52:48.289Z',
  },
  {
    id: '74c8ab09-6225-4982-8145-5be0b5c55a28',
    name: 'tensorflow_serving_mnist',
    author: 'OpenPAI',
    type: 'old',
    categories: ['official example'],
    tags: ['official example'],
    summary: 'A Tensorflow Mnist Model Example',
    description:
      '# Serving a TensorFlow MNIST Digit Recognition Model\n  This example shows you how to use TensorFlow Serving components to export a trained TensorFlow model\n  and use the standard tensorflow_model_server to serve it on OpenPAI.\n  This example uses the simple Softmax Regression model introduced in the TensorFlow tutorial for handwritten image (MNIST data) classification.\n  Reference https://www.tensorflow.org/tfx/serving/serving_basic.',
    content: {
      config: 'tensorflow_serving_mnist.yaml',
    },
    useNumber: 0,
    starNumber: 0,
    status: 'approved',
    createdAt: '2020-07-28T04:52:48.289Z',
    updatedAt: '2020-07-28T04:52:48.289Z',
  },
  {
    id: '69ff3c37-1405-49a7-b9de-47e640ba490c',
    name: 'Caffe2 Minist Example',
    author: 'OpenPAI',
    type: 'old',
    categories: ['official example'],
    tags: ['official example'],
    summary: 'A caffe minist example',
    description:
      '  # Caffe MNIST Example\n  This example shows how to train LeNet on MNIST with Caffe on OpenPAI.\n\n  ## Dataset\n  The MNIST dataset is downloaded from MNIST website and converted into caffe format.\n\n  ## LeNet\n  This example will use the LeNet network, which is known to work well on digit classification tasks.\n  It will use a slightly different version from the original LeNet implementation,\n  replacing the sigmoid activations with Rectified Linear Unit (ReLU) activations for the neurons.\n\n  The design of LeNet contains the essence of CNNs that are still used in larger models such as the ones in ImageNet.\n  In general, it consists of a convolutional layer followed by a pooling layer, another convolution layer followed by a pooling layer,\n  and then two fully connected layers similar to the conventional multilayer perceptrons.\n  The layers are defined in `$CAFFE_ROOT/examples/mnist/lenet_train_test.prototxt`.\n\n  ## Reference\n  http://caffe.berkeleyvision.org/gathered/examples/mnist.htm',
    content: {
      config: 'caffe-mnist.yaml',
    },
    useNumber: 0,
    starNumber: 0,
    status: 'approved',
    createdAt: '2020-07-28T04:52:48.289Z',
    updatedAt: '2020-07-28T04:52:48.289Z',
  },
  {
    id: '9d3fbdad-dd82-429c-a368-f3d7b41717b5',
    name: 'Caffe2 ResNet50 Example',
    author: 'OpenPAI',
    type: 'old',
    categories: ['official example'],
    tags: ['official example'],
    summary: 'A caffe resnet50 example',
    description:
      '# Caffe2 ResNet50 Example\n  This example shows using caffe2 to train ResNet50 with fake data on OpenPAI.',
    content: {
      config: 'caffe2-resnet50.yaml',
    },
    useNumber: 0,
    starNumber: 0,
    status: 'approved',
    createdAt: '2020-07-28T04:52:48.289Z',
    updatedAt: '2020-07-28T04:52:48.289Z',
  },
  {
    id: '5fa59045-c3f8-4243-88ff-89a1034681d8',
    name: 'Chainer Example',
    author: 'OpenPAI',
    type: 'old',
    categories: ['official example'],
    tags: ['official example'],
    summary: 'A chainer example',
    description:
      'This is an [example chainer Docker image on OpenPAI](https://github.com/Microsoft/pai/tree/master/examples/chainer).',
    content: {
      config: 'chainer-cifar.yaml',
    },
    useNumber: 0,
    starNumber: 0,
    status: 'approved',
    createdAt: '2020-07-28T04:52:48.289Z',
    updatedAt: '2020-07-28T04:52:48.289Z',
  },
  {
    id: 'd5f357d0-70cc-435c-92f2-21d63c7a1513',
    name: 'Horovod Pytorch',
    author: 'OpenPAI',
    type: 'old',
    categories: ['official example'],
    tags: ['official example'],
    summary: 'A horovod pytorch example',
    description:
      'This is a distributed synthetic benchmark for Horovod with PyTorch backend running on OpenPAI.\nIt runs [Horovod with Open MPI](https://github.com/horovod/horovod/blob/master/docs/mpirun.rst).',
    content: {
      config: 'horovod-pytorch-synthetic-benchmark.yaml',
    },
    useNumber: 0,
    starNumber: 0,
    status: 'approved',
    createdAt: '2020-07-28T04:52:48.289Z',
    updatedAt: '2020-07-28T04:52:48.289Z',
  },
  {
    id: '55a21b76-abbe-4f75-9b09-ed0ee3accc16',
    name: 'Keras Tensorflow Mnist Example',
    author: 'OpenPAI',
    type: 'old',
    categories: ['official example'],
    tags: ['official example'],
    summary: 'A keras tensorflow minist example',
    description:
      '# Keras Tensorflow Backend MNIST Digit Recognition Examples\n  Trains a simple convnet on the MNIST dataset.\n  Gets to 99.25% test accuracy after 12 epochs\n  (there is still a lot of margin for parameter tuning).\n  16 seconds per epoch on a GRID K520 GPU.\n\n  Reference https://github.com/keras-team/keras/blob/master/examples/mnist_cnn.py\n',
    content: {
      config: 'keras-tensorflow-mnist.yaml',
    },
    useNumber: 0,
    starNumber: 0,
    status: 'approved',
    createdAt: '2020-07-28T04:52:48.289Z',
    updatedAt: '2020-07-28T04:52:48.289Z',
  },
  {
    id: '56a0d871-fe2d-43ce-b26c-b89b9c0646fd',
    name: 'Mxnet Autoencoder Example',
    author: 'OpenPAI',
    type: 'old',
    categories: ['official example'],
    tags: ['official example'],
    summary: 'A Mxnet Autoencoder Example',
    description:
      '# MXNet Autoencoder Example\n  Autoencoder architectures are often used for unsupervised feature learning.\n  This [link](http://ufldl.stanford.edu/tutorial/unsupervised/Autoencoders/) contains an introduction tutorial to autoencoders.\n  This example illustrates a simple autoencoder using a stack of convolutional layers for both the encoder and the decoder.\n\n  The idea of an autoencoder is to learn to use bottleneck architecture to encode the input and then try to decode it to reproduce the original.\n  By doing so, the network learns to effectively compress the information of the input,\n  the resulting embedding representation can then be used in several domains.\n  For example as featurized representation for visual search, or in anomaly detection.\n\n  Reference https://github.com/apache/incubator-mxnet/tree/master/example/autoencoder',
    content: {
      config: 'mxnet-autoencoder.yaml',
    },
    useNumber: 0,
    starNumber: 0,
    status: 'approved',
    createdAt: '2020-07-28T04:52:48.289Z',
    updatedAt: '2020-07-28T04:52:48.289Z',
  },
  {
    id: 'cc42d399-06d8-4b93-9e84-e5f609ef0c73',
    name: 'Pytorch Mnist Example',
    author: 'OpenPAI',
    type: 'old',
    categories: ['official example'],
    tags: ['official example'],
    summary: 'A Pytorch Mnist Example',
    description:
      'This is a basic PyTorch MNIST digit recognition example running on OpenPAI.\n  ```sh\n  python main.py\n  # CUDA_VISIBLE_DEVICES=2 python main.py  # to specify GPU id to ex. 2\n  ```',
    content: {
      config: 'pytorch-mnist.yaml',
    },
    useNumber: 0,
    starNumber: 0,
    status: 'approved',
    createdAt: '2020-07-28T04:52:48.289Z',
    updatedAt: '2020-07-28T04:52:48.289Z',
  },
  {
    id: '1c7efdef-40da-46d0-bdea-16c25e560380',
    name: 'Pytorch Regression Example',
    author: 'OpenPAI',
    type: 'old',
    categories: ['official example'],
    tags: ['official example'],
    summary: 'A Pytorch Regression Example',
    description:
      'This is a simple PyTorch regression example running on OpenPAI.\n  This example Trains a single fully-connected layer to fit a 4th degree polynomial.',
    content: {
      config: 'pytorch-regression.yaml',
    },
    useNumber: 0,
    starNumber: 0,
    status: 'approved',
    createdAt: '2020-07-28T04:52:48.289Z',
    updatedAt: '2020-07-28T04:52:48.289Z',
  },
  {
    id: '80cf9714-de4e-480b-8e26-66f529dbff6d',
    name: 'Rocm Pytorch Mnist',
    author: 'OpenPAI',
    type: 'old',
    categories: ['official example'],
    tags: ['official example'],
    summary: 'A Rocm Pytorch Example',
    description: 'PyTorch MNIST example on AMD GPUs.',
    content: {
      config: 'rocm-pytorch-mnist.yaml',
    },
    useNumber: 0,
    starNumber: 0,
    status: 'approved',
    createdAt: '2020-07-28T04:52:48.289Z',
    updatedAt: '2020-07-28T04:52:48.289Z',
  },
  {
    id: '44cbad87-c2d5-4433-9890-0883f07e3912',
    name: 'rocm_tensorflow2',
    author: 'OpenPAI',
    type: 'old',
    categories: ['official example'],
    tags: ['official example'],
    summary: 'A Rocm Tensorflow2 Example',
    description: 'TensorFlow2 example on AMD GPUs.',
    content: {
      config: 'rocm-pytorch-mnist.yaml',
    },
    useNumber: 0,
    starNumber: 0,
    status: 'approved',
    createdAt: '2020-07-28T04:52:48.289Z',
    updatedAt: '2020-07-28T04:52:48.289Z',
  },
  {
    id: '17c2500d-94ed-4e2d-af74-e1ace47987af',
    name: 'sklearn_text_vectorizers',
    author: 'OpenPAI',
    type: 'old',
    categories: ['official example'],
    tags: ['official example'],
    summary: 'A Scikit-learn Example',
    description:
      'This is a scikit-learn example on OpenPAI.\n  It is a speed benchmark for text vectorizer with scikit-learn.',
    content: {
      config: 'sklearn-text-vectorizers.yaml',
    },
    useNumber: 0,
    starNumber: 0,
    status: 'approved',
    createdAt: '2020-07-28T04:52:48.289Z',
    updatedAt: '2020-07-28T04:52:48.289Z',
  },
  {
    id: '4fb02608-3769-475c-a0c2-c2155fb03c4f',
    name: 'tensorflow_cifar10',
    author: 'OpenPAI',
    type: 'old',
    categories: ['official example'],
    tags: ['official example'],
    summary: 'A Tensorflow Distributed Example',
    description:
      '  # TensorFlow Distributed Training\n  This example runs TensorFlow Distributed Training on OpenPAI using CIFAR10.\n  Scripts are from TensorFlow Benchmarks repository, please refer to\n  https://github.com/tensorflow/benchmarks/tree/master/scripts/tf_cnn_benchmarks.',
    content: {
      config: 'tensorflow-cifar10.yaml',
    },
    useNumber: 0,
    starNumber: 0,
    status: 'approved',
    createdAt: '2020-07-28T04:52:48.289Z',
    updatedAt: '2020-07-28T04:52:48.289Z',
  },
  {
    id: '74c8ab09-6225-4982-8145-5be0b5c55a28',
    name: 'tensorflow_serving_mnist',
    author: 'OpenPAI',
    type: 'old',
    categories: ['official example'],
    tags: ['official example'],
    summary: 'A Tensorflow Mnist Model Example',
    description:
      '# Serving a TensorFlow MNIST Digit Recognition Model\n  This example shows you how to use TensorFlow Serving components to export a trained TensorFlow model\n  and use the standard tensorflow_model_server to serve it on OpenPAI.\n  This example uses the simple Softmax Regression model introduced in the TensorFlow tutorial for handwritten image (MNIST data) classification.\n  Reference https://www.tensorflow.org/tfx/serving/serving_basic.',
    content: {
      config: 'tensorflow_serving_mnist.yaml',
    },
    useNumber: 0,
    starNumber: 0,
    status: 'approved',
    createdAt: '2020-07-28T04:52:48.289Z',
    updatedAt: '2020-07-28T04:52:48.289Z',
  },
];
